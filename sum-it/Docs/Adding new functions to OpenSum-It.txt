
/*///////////////////////////////////////////////////////*/
/*                                                       */
/*  QUICK TUTORIAL: Adding new functions to OpenSum-It   */
/*                                                       */
/*///////////////////////////////////////////////////////*/


In Docs directory look at file: OpenFormula_functions_need_to_be_implemented - it contains list of allready implemented
and not yet implemented functions in OpenSum-It. It would be a good idea to start from this list (to search for not yet
implemented function or for simple check - maybe function that you want implement is allready here only named differently) 


1) sum-it/Source/main/Functions


1.1) Functions.XXX.cpp (XXX - function category name, in which new function fits, for example: math, logical, date-time ...)

add new function definition and write function's code:

-------------------------------------------------------------
void YYYFunction(Value *stack, int argCnt, CContainer *cells)
{
	// YYYFunction code goes here
}
-------------------------------------------------------------


1.2) Functions.h

add function enumerator to the list:

------------------------------
enum {
		...
		kYYYFuncNr,    <---- !
		kFunctionCount
};
------------------------------

add function declaration:

--------------------------------------------------------------
void YYYFunction(Value *stack, int argCnt, CContainer *cells);
--------------------------------------------------------------


1.3) FunctionUtils.cpp

map function enumerator kYYYFuncNr to function YYYFunction:

----------------------------------------------
void SetupDefaultFuncs()
{
	...
	gFuncs[kYYYFuncNr] = YYYFunction;  <---- !
} /* InitFunctions */
----------------------------------------------



2) sum-it/Resources


2.1) FuncNames.txt

add function syntax to the end of the list leaving one empty end line

-------------------------------------
...
YYY(argument, argument, ...)  <---- !

-------------------------------------

for example: POWER(number,power)


2.2) FuncDescs.txt

add function description to the end of the list leaving one empty end line

-------------------------------------------------
...
Function description text goes here  <---- !

-------------------------------------------------

for example: Result of a number raised to a power


2.3) funcs_by_nr.r

add to the end of the list:

---------------------------------------------
resource 'Func' (128, "Functions")
{
	{
	...
	"YYY", n, funcNr, funcCategoryNr  <---- !
	}
};
---------------------------------------------

"YYY" 			- function name (the one used in function syntax)
n 				- quantity of arguments accepted by function
funcNr 			- function numerical identifier (last function nr + 1)
funcCategoryNr 	- number of function category, in which new function fits, for example: math, logical, date-time ...

funcCategoryNr:
1 - Cell
2 - Date-Time
3 - Finance
4 - Math
5 - Statistical
6 - Text
7 - Logical
8 - Engeneering



3.) sum-it/Source/main/Excel/Excel.formula.cpp

Map Excel function to OpenSum-It function:

------------------------------------------------------------
static void MapFunction(FuncCallData& fcd)
{
	switch (fcd.funcNr)
	{
		...
		
		case 0x007F: fcd.funcNr = kYYYFuncNr; break; <---- !
	
		default: fcd.funcNr = -1;
	}

	if (fcd.funcNr >= 0)
		fcd.argCnt = gFuncArrayByNr[fcd.funcNr].argCnt;
	else
		fcd.argCnt = 0;
} // MapFunction
--------------------------------------------------------------

0x007F - Excel function nr. in hex (in Docs directory look at file: Exel_function_nr_by_name_for_mapping)

kYYYFuncNr - OpenSum-It YYYFunction enumerator from sum-it/Source/main/Functions/Functions.h




/*/////////////////////////////////////////////////////////////*/
/*                                                             */
/*   written by Gediminas Jarulaitis, beos.zealot@gmail.com    */
/*                                                             */
/*   2013.11.03                                                */
/*                                                             */
/*/////////////////////////////////////////////////////////////*/
